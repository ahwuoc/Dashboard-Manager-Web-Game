// app/actions.ts
"use server";

// D·ª±a tr√™n c√°c ƒëo·∫°n code tr∆∞·ªõc, RewardItem interface ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong GridSpinWheel.tsx
// N·∫øu RewardItem c·ªßa b·∫°n ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a ·ªü m·ªôt file chung kh√°c (v√≠ d·ª•: types/index.ts), h√£y ch·ªânh l·∫°i ƒë∆∞·ªùng d·∫´n
import { RewardItem as ClientRewardItem } from "./page";

// ƒê·ªãnh nghƒ©a l·∫°i RewardItem v·ªõi thu·ªôc t√≠nh weight cho server-side
interface ServerRewardItem extends ClientRewardItem {
  weight: number;
}

// ƒê√¢y l√† data g·ªëc c·ªßa b·∫°n, C√ôNG V·ªöI TR·ªåNG S·ªê (WEIGHTS)
// C·∫ßn ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a T·∫†I ƒê√ÇY (tr√™n server) ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh to√†n v·∫πn.
// KH√îNG BAO GI·ªú L·∫§Y TR·ªåNG S·ªê HO·∫∂C DATA N√ÄY TR·ª∞C TI·∫æP T·ª™ CLIENT!
const SERVER_SIDE_WEIGHTED_REWARDS: ServerRewardItem[] = [
  {
    id: 1,
    label: "Th·ªèi v√†ng",
    value: "Random 1-100 th·ªèi",
    color: "#4A90E2", // Blue
    icon: "http://103.78.0.42/public/icon/4028.png",
    rarity: "Rare",
    revealed: false,
    weight: 10, // V√≠ d·ª•: Rare c√≥ tr·ªçng s·ªë 10
  },
  {
    id: 2,
    label: "B√¥ng Tai C·∫•p 5",
    value: "x1",
    color: "#F5A623", // Orange
    icon: "http://103.78.0.42/public/icon/7993.png",
    rarity: "Common",
    revealed: false,
    weight: 50, // V√≠ d·ª•: Common c√≥ tr·ªçng s·ªë 50 (c∆° h·ªôi cao h∆°n)
  },
  {
    id: 3,
    label: "C·∫£i Trang Mega Broly",
    value: "x1",
    color: "#D0021B", // Red
    icon: "http://103.78.0.42/public/icon/17548.png",
    rarity: "Epic",
    revealed: false,
    weight: 8, // V√≠ d·ª•: Epic c√≥ tr·ªçng s·ªë 8
  },
  {
    id: 4,
    label: "C·∫£m ∆°n b·∫°n ƒë√£ tham gia",
    value: "C·∫£m ∆°n",
    color: "#7ED321", // Green
    icon: "üéâ",
    rarity: "Common",
    revealed: false,
    weight: 60, // V√≠ d·ª•: Common (C·∫£m ∆°n) c√≥ tr·ªçng s·ªë 60 (r·∫•t hay ra)
  },
  {
    id: 5,
    label: "V√°n bay M√¢y M∆∞a",
    value: "x1",
    color: "#50E3C2", // Cyan/Turquoise
    icon: "http://103.78.0.42/public/icon/18067.png",
    rarity: "Uncommon",
    revealed: false,
    weight: 20, // V√≠ d·ª•: Uncommon c√≥ tr·ªçng s·ªë 20
  },
  {
    id: 6,
    label: "C·∫£i trang Goku Rose VIP",
    value: "x1",
    color: "#F8E71C", // Yellow
    icon: "http://103.78.0.42/public/icon/18044.png",
    rarity: "Legendary",
    revealed: false,
    weight: 2, // V√≠ d·ª•: Legendary c√≥ tr·ªçng s·ªë 2 (r·∫•t hi·∫øm)
  },
  {
    id: 7,
    label: "ƒê√° Qu√Ω Huy·ªÅn Tho·∫°i",
    value: "x1",
    color: "#9013FE", // Purple
    icon: "üî•",
    rarity: "Mythic",
    revealed: false,
    weight: 1, // V√≠ d·ª•: Mythic c√≥ tr·ªçng s·ªë 1 (hi·∫øm nh·∫•t)
  },
  {
    id: 8,
    label: "Danh Hi·ªáu Tr√πm SƒÉn Boss",
    value: "x1",
    color: "#FF6B35", // Orange-Red
    icon: "http://103.78.0.42/public/icon/18248.png",
    rarity: "Rare",
    revealed: false,
    weight: 15, // V√≠ d·ª•: Rare kh√°c c√≥ tr·ªçng s·ªë 15
  },
  // M·ª•c c√≥ value "Spin" (id: 9) s·∫Ω kh√¥ng ƒë∆∞·ª£c ƒë∆∞a v√†o SERVER_SIDE_WEIGHTED_REWARDS
  // v√¨ n√≥ kh√¥ng ph·∫£i l√† m·ªôt ph·∫ßn th∆∞·ªüng c√≥ th·ªÉ quay ra.
  // N√≥ ch·ªâ l√† placeholder cho n√∫t b·∫•m tr√™n client.
];

// H√†m Server Action ƒë·ªÉ x·ª≠ l√Ω vi·ªác quay th∆∞·ªüng
export async function spinWheelAction(): Promise<{
  success: boolean;
  winner?: ClientRewardItem; // Tr·∫£ v·ªÅ RewardItem kh√¥ng c√≥ weight cho client
  error?: string;
}> {
  // Th·ª±c hi·ªán c√°c ki·ªÉm tra nghi·ªáp v·ª• t·∫°i ƒë√¢y (v√≠ d·ª•: ng∆∞·ªùi d√πng c√≤n l∆∞·ª£t quay kh√¥ng?)
  // ƒê√¢y l√† n∆°i b·∫°n s·∫Ω t∆∞∆°ng t√°c v·ªõi database, x√°c th·ª±c user, v.v.
  // const userId = getUserIdFromSession(); // V√≠ d·ª• l·∫•y user ID t·ª´ session (c·∫ßn c√†i ƒë·∫∑t authentication)
  // if (!userId) {
  //   return { success: false, error: "Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p." };
  // }
  // const userSpins = await getUserSpins(userId); // Gi·∫£ ƒë·ªãnh h√†m n√†y l·∫•y s·ªë l∆∞·ª£t quay c√≤n l·∫°i c·ªßa user
  // if (userSpins <= 0) {
  //   return { success: false, error: "B·∫°n ƒë√£ h·∫øt l∆∞·ª£t quay!" };
  // }

  try {
    const prizePool = SERVER_SIDE_WEIGHTED_REWARDS; // D√πng tr·ª±c ti·∫øp m·∫£ng ƒë√£ c√≥ tr·ªçng s·ªë

    if (prizePool.length === 0) {
      return { success: false, error: "Kh√¥ng c√≥ ph·∫ßn th∆∞·ªüng n√†o ƒë·ªÉ quay." };
    }

    // --- Logic ch·ªçn ph·∫ßn th∆∞·ªüng theo tr·ªçng s·ªë ---
    const totalWeight = prizePool.reduce((sum, item) => sum + item.weight, 0);

    // Ch·ªçn m·ªôt s·ªë ng·∫´u nhi√™n t·ª´ 0 ƒë·∫øn totalWeight
    const randomNumber = Math.random() * totalWeight;

    let winningItem: ServerRewardItem | undefined;
    let currentWeight = 0;

    // Duy·ªát qua c√°c ph·∫ßn th∆∞·ªüng ƒë·ªÉ t√¨m ra ph·∫ßn th∆∞·ªüng th·∫Øng cu·ªôc
    for (const item of prizePool) {
      currentWeight += item.weight;
      if (randomNumber < currentWeight) {
        winningItem = item;
        break;
      }
    }

    if (!winningItem) {
      // Fallback n·∫øu c√≥ l·ªói x·∫£y ra (th∆∞·ªùng kh√¥ng n√™n x·∫£y ra n·∫øu tr·ªçng s·ªë > 0)
      console.warn("Weighted selection failed, falling back to random pick.");
      winningItem = prizePool[Math.floor(Math.random() * prizePool.length)];
    }

    // --- K·∫øt th√∫c logic ch·ªçn ph·∫ßn th∆∞·ªüng ---

    // Ghi l·∫°i l·ªãch s·ª≠ quay v√†o database (v√≠ d·ª•)
    // C·∫ßn c√†i ƒë·∫∑t k·∫øt n·ªëi database v√† c√°c h√†m t∆∞∆°ng t√°c t·∫°i ƒë√¢y
    // await saveSpinResultToDatabase(userId, winningItem.id);
    // await decrementUserSpins(userId); // Gi·∫£m l∆∞·ª£t quay c·ªßa ng∆∞·ªùi d√πng

    // Tr·∫£ v·ªÅ ph·∫ßn th∆∞·ªüng th·∫Øng cu·ªôc cho client
    // ƒê·∫£m b·∫£o ch·ªâ tr·∫£ v·ªÅ c√°c thu·ªôc t√≠nh m√† client c·∫ßn (kh√¥ng c·∫ßn weight)
    const clientWinner: ClientRewardItem = {
      id: winningItem.id,
      label: winningItem.label,
      value: winningItem.value,
      icon: winningItem.icon,
      rarity: winningItem.rarity,
      color: winningItem.color,
      revealed: false, // Client s·∫Ω t·ª± handle tr·∫°ng th√°i revealed
    };

    return { success: true, winner: clientWinner };
  } catch (err) {
    console.error("L·ªói khi x·ª≠ l√Ω quay th∆∞·ªüng:", err);
    return { success: false, error: "ƒê√£ x·∫£y ra l·ªói h·ªá th·ªëng khi quay th∆∞·ªüng." };
  }
}

// H√†m Server Action ƒë·ªÉ l·∫•y l·ªãch s·ª≠ (n·∫øu b·∫°n mu·ªën load t·ª´ DB)
export async function getSpinHistoryAction(): Promise<ClientRewardItem[]> {
  // ƒê√¢y l√† n∆°i b·∫°n s·∫Ω load l·ªãch s·ª≠ t·ª´ database cho user c·ª• th·ªÉ
  // V√≠ d·ª•: const userId = getUserIdFromSession();
  // if (!userId) return [];
  // const history = await loadUserSpinHistoryFromDatabase(userId);
  // return history.map(item => ({...item, revealed: false})); // ƒê·∫£m b·∫£o format ph√π h·ª£p
  //
  // T·∫°m th·ªùi tr·∫£ v·ªÅ m·∫£ng r·ªóng ƒë·ªÉ minh h·ªça
  return [];
}
